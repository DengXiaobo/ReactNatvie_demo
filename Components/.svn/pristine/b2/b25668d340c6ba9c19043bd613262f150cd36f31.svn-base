/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    ActivityIndicator,
    Platform,
    AlertIOS,
    TouchableOpacity,
    Image,
    ListView,
    TextInput,
    Modal
} from 'react-native';

import Video from 'react-native-video';
import Dimensions from 'Dimensions';
import Icon from 'react-native-vector-icons/Ionicons';
import request from '../common/request'
import config from '../common/config'
import Button from 'react-native-button'
const {width,height} = Dimensions.get('window');

let cachedResults = {
    nextPage: 1,
    items: [],
    total: 0,
}

export default class Detail extends Component {

    static navigationOptions = {
        title: '视频详情',
    };

    constructor(props){
        super(props);
        const { params } = this.props.navigation.state;
        this.state={
            rowData: params.rowData,
            rate: 1,
            volume: 1,
            muted: false,
            resizeMode: 'contain',
            paused: false,
            duration: 0.0,
            currentTime: 0.0,
            videoLoaded:false,
            playing:false,
            second:false,
            isLoadingTail: false,
            dataSource: new ListView.DataSource({
                rowHasChanged: (row1, row2)=> row1 !== row2,
            }),

            animationType: 'fade',//none slide fade
            modalVisible: false,//模态场景是否可见
            transparent: false,//是否透明显示

            content:'',
            isSendingComment:false,
        }
        this._onLoadStart = this._onLoadStart.bind(this);
        this._onLoad = this._onLoad.bind(this);
        this._onProgress = this._onProgress.bind(this);
        this._onEnd = this._onEnd.bind(this);
        this._onError = this._onError.bind(this);
        this._rePlay = this._rePlay.bind(this);
        this._pause = this._pause.bind(this);
        this._resume = this._resume.bind(this);

        this._renderRow = this._renderRow.bind(this);
        this._fetchMoreData = this._fetchMoreData.bind(this);
        this._fetchData = this._fetchData.bind(this);
        this._renderFooter = this._renderFooter.bind(this);
        this._renderHeader = this._renderHeader.bind(this);

        this._focus = this._focus.bind(this);
        this._blur = this._blur.bind(this);

        this._setModalVisible = this._setModalVisible.bind(this);
        this._startShow = this._startShow.bind(this);
        this._closeModal =this._closeModal.bind(this);
        this._submit = this._submit.bind(this);
    }

    _rePlay(){
        this.refs.videoPlayer.seek(0);
    }

    _pause(){
        if(!this.state.paused){
            this.setState({
                paused:true
            });
        }
    }

    _resume(){
        if(this.state.paused){
            this.setState({
                paused:false
            });
        }
    }

    _onLoadStart(){
        console.log('_onLoadStart');
    }

    _onLoad(data){
        this.setState({duration: data.duration});
    }

    _onProgress(data){

        if (data.currentTime < this.state.duration)
        {
            if(!this.state.videoLoaded){
                this.setState({
                    videoLoaded:true,
                });
            }

            if(!this.state.playing){
                this.setState({
                    playing:true,
                });
            }

            this.setState({currentTime: data.currentTime});
        }

    }

    _onEnd(){
        this.setState({
                currentTime:this.state.duration,
                playing:false,
                second:true
            }
        );

    }

    _onError(error){
        console.log('错误：'+JSON.stringify(error));
    }

    getCurrentTimePercentage() {
        if (this.state.currentTime > 0) {
            return parseFloat(this.state.currentTime) / parseFloat(this.state.duration);
        } else {
            return 0;
        }
    }

    componentDidMount() {
        this._fetchData(1);//从服务器获取的真实数据
    }

    render() {
        let rowData =  this.state.rowData;
        const flexCompleted = this.getCurrentTimePercentage() * 100;
        const flexRemaining = (1 - this.getCurrentTimePercentage()) * 100;
        return (
            <View style={styles.container}>
                <View style={styles.videoBox}>
                    <Video
                        ref="videoPlayer"

                        source={{uri: Platform.OS === 'ios' ? 'http://47.94.11.204:8080/test/broadchurch.mp4' : ''}}
                        style={styles.video}
                        rate={this.state.rate}
                        paused={this.state.paused}
                        volume={this.state.volume}
                        muted={this.state.muted}
                        resizeMode={this.state.resizeMode}
                        repeat={false}

                        onLoadStart={this._onLoadStart}
                        onLoad={this._onLoad}
                        onProgress={this._onProgress}
                        onEnd={this._onEnd}
                        onError={this._onError}
                    />

                    {!this.state.videoLoaded ?
                        <ActivityIndicator color="white" size="large"
                                           style={styles.loading} />
                        :null}

                    {this.state.videoLoaded && !this.state.playing ?
                        <Icon
                            name='ios-play'
                            size={45}
                            onPress={this._rePlay}
                            style={styles.play} />
                        :null}

                    {this.state.videoLoaded && this.state.playing ?
                        <TouchableOpacity
                            onPress={this._pause}
                            style={styles.pauseArea}
                        >

                            {this.state.paused ?
                                <Icon
                                    name='ios-play'
                                    size={45}
                                    onPress={this._resume}
                                    style={styles.play} />
                                :null}


                        </TouchableOpacity>
                        :null}

                    <View style={styles.progress}>
                        <View style={[styles.innerProgressCompleted, {flex: flexCompleted}]} />
                        <View style={[styles.innerProgressRemaining, {flex: flexRemaining}]} />
                    </View>
                </View>

                <ListView
                    dataSource={this.state.dataSource}
                    renderRow={this._renderRow}
                    onEndReached={this._fetchMoreData}
                    onEndReachedThreshold={20}
                    renderFooter={this._renderFooter}
                    renderHeader={this._renderHeader}
                    enableEmptySections={true}
                    automaticallyAdjustContentInsets={false}
                    showsVerticalScrollIndicator={false}
                />

                <Modal
                    animationType={this.state.animationType}
                    transparent={this.state.transparent}
                    visible={this.state.modalVisible}
                    onRequestClose={() => {
                        this._setModalVisible(false)
                    } }
                    onShow={this._startShow}
                >
                    <View style={styles.modalContainer}>
                        <Icon
                            name='ios-close-outline'
                            size={45}
                            onPress={this._closeModal}
                            style={styles.closeIcon}/>
                        <View style={styles.commentBox}>
                            <View style={styles.comment}>
                                <TextInput
                                    placeholder='过来评论一下吧'
                                    underlineColorAndroid = 'transparent'
                                    style={styles.content}
                                    multiline={true}
                                    defaultValue={this.state.content}
                                    onChangeText={(text)=>{
                                        this.setState({
                                            content:text
                                        });
                                    }}
                                />
                            </View>
                        </View>
                        <Button
                            style={styles.submitButton}
                            onPress = {this._submit}
                        >评论一下</Button>
                    </View>
                </Modal>

            </View>

        );
    }

    _setModalVisible(visible){
        this.setState({ modalVisible: visible });
    }

    _startShow(){
        console.log('开始显示modal');
    }

    _closeModal(){
        this._setModalVisible(false);
    }

    _submit(){
        if(!this.state.content){
            return alert('评论内容不能为空');
        }
        if(this.state.isSendingComment){
            return alert('正在发送评论');
        }
        //第一次发生评论
        this.setState({
            isSendingComment:true
        },()=>{
            let body={
                accessToken:'wewefeo',
                id_video:'12333',
                content:this.state.content,
            }
            let url = config.api.base + config.api.comment;
            request.post(url,body)
                .then(
                    (data)=>{
                        if(data && data.success){
                            let itmes = cachedResults.items.slice();
                            itmes = [{
                                content:this.state.content,
                                replyBy:{
                                    nickname:'dfy',
                                    avatar:'http://dummyimage.com/640x640/967776)'
                                }
                            }].concat(itmes);

                            cachedResults.items = itmes;
                            cachedResults.total = cachedResults.total +1;
                            this.setState({
                                dataSource:this.state.dataSource.cloneWithRows(cachedResults.items),
                                isSendingComment:false,
                                content:'',
                                modalVisible: false,
                            });

                        }
                    }
                ).catch((err)=>{
                console.log(err);
                this.setState({
                    isSendingComment:false,
                });
                this._setModalVisible(false);
                alert('评论失败，请稍后重试');
            });
        });

    }

    //加载更多的数据 上拉加载更多  滑动分页
    _fetchMoreData() {
        if (!this._hasMore() || this.state.isLoadingTail) {
            return
        }
        //去服务器请求加载更多的数据了
        let page = cachedResults.nextPage;
        this._fetchData(page)
    }

    _hasMore() {
        return cachedResults.items.length !== cachedResults.total
    }

    _fetchData(page) {
        this.setState({
            isLoadingTail: true
        });
        request.get(config.api.base + config.api.comments, {
            accessToken: 'jjjj',
            id: '2333399',
            page: page
        }).then(
            (data)=> {
                if (data.success) {
                    //把服务器得到的数据存到缓存里面
                    let items = cachedResults.items.slice();
                    items = items.concat(data.data);
                    cachedResults.nextPage += 1
                    cachedResults.items = items
                    cachedResults.total = data.total
                    console.log('总个数据的长度是：' + cachedResults.total);
                    console.log('当前的listview数据的总长度是：' + cachedResults.items.length);
                    setTimeout(()=> {
                        this.setState({
                            dataSource: this.state.dataSource.cloneWithRows(
                                cachedResults.items
                            ),
                            isLoadingTail: false
                        });
                    }, 1000);
                }
            }
        ).catch(
            (err) => {
                this.setState({
                    isLoadingTail: false
                });
                console.log('err' + err);
            }
        )
    }

    _renderRow(rowData_reply) {
        return (
            <View
                style={styles.replyBox}
                key={rowData_reply._id}
            >
                <Image
                    style={styles.replyAvatar}
                    source={{uri: rowData_reply.replyBy.avatar}}
                />
                <View style={styles.reply}>
                    <Text style={styles.replyNickname}>{rowData_reply.replyBy.nickname}</Text>
                    <Text style={styles.replyContent}>{rowData_reply.content}</Text>
                </View>
            </View>
        );

    }

    _renderFooter() {
        if (!this._hasMore() && cachedResults.total !== 0) {
            return (<View style={styles.loadingMore}>
                <Text style={styles.loadingText}>没有更多数据啦...</Text>
            </View>);
        }

        if (!this.state.isLoadingTail) {
            return <View style={styles.loadingMore}/>
        }

        return (

            <ActivityIndicator
                style={styles.loadingMore}
            />

        );
    }

    _renderHeader() {
        let rowData = this.state.rowData;
        return (
            <View style={styles.listHeader}>

                <View
                    style={styles.infoBox}
                >

                    <Image
                        style={styles.avatar}
                        source={{uri: rowData.author.avatar}}
                    />
                    <View style={styles.descBox}>
                        <Text style={styles.nickname}>视频作者:{rowData.author.nickname}</Text>
                        <Text style={styles.title}>视频标题:{rowData.title}</Text>
                    </View>

                </View>

                <View style={styles.commentBox}>
                    <View style={styles.comment}>

                        <TextInput
                            placeholder='过来评论一下吧'
                            underlineColorAndroid = 'transparent'
                            style={styles.content}
                            multiline={true}
                            onFocus={this._focus}
                            onBlur={this._blur}
                        />

                    </View>

                </View>

                <View style={styles.commentArea}>
                    <Text style={styles.commentTitle}>精彩评论</Text>
                </View>

            </View>

        );
    }

    _focus() {
        console.log('获得焦点');
        this._setModalVisible(true);
    }

    _blur() {
        console.log('失去焦点');
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    videoBox:{
        width:width,
        height:280,
        backgroundColor:'black'
    },
    video:{
        width:width,
        height:270,
        backgroundColor:'black'
    },
    loading:{
        position:'absolute',
        width:width,
        height:270,
        backgroundColor:'transparent',
    },
    progress: {
        flex: 1,
        flexDirection: 'row',
        borderRadius: 3,
        overflow: 'hidden',
    },
    innerProgressCompleted: {
        height: 10,
        backgroundColor: 'red',
    },
    innerProgressRemaining: {
        height: 10,
        backgroundColor: '#cccccc',
    },
    play:{
        position:'absolute',
        top:160,
        left:width/2 - 30,
        width:60,
        height:60,
        paddingTop:10,
        paddingLeft:22,
        backgroundColor:'transparent',
        borderColor:'#000',
        borderWidth:1,
        borderRadius:30,
        color:'#ed7b66'
    },
    pauseArea:{
        position:'absolute',
        top:0,
        left:0,
        width:width,
        height:350,
    },

    infoBox: {
        flexDirection: 'row',
        width: width,
        justifyContent: 'center',
        marginTop: 10,
    },
    avatar: {
        width: 60,
        height: 60,
        borderRadius: 30,
        marginRight: 10,
        marginLeft: 10,
    },
    descBox: {
        flex: 1,
    },
    nickname: {
        fontSize: 18,
    },
    title: {
        marginTop: 8,
        fontSize: 16,
        color: '#666'
    },

    replyBox: {
        flexDirection: 'row',
        width: width,
        justifyContent: 'flex-start',
        marginTop: 10,
    },
    replyAvatar: {
        width: 40,
        height: 40,
        borderRadius: 20,
        marginRight: 10,
        marginLeft: 10,
    },
    reply: {
        flex: 1,
    },
    replyNickname: {
        color: 'rgb(51,51,51)'
    },
    replyContent: {
        marginTop: 4,
        color: 'rgb(81,81,81)'
    },
    loadingMore: {
        marginVertical: 20
    },
    loadingText: {
        fontSize: 18,
        color: 'red',
        textAlign: 'center'
    },

    listHeader: {
        marginTop: 10,
        width: width,
    },
    commentBox: {
        marginTop: 6,
        padding: 8,
        width: width,
    },
    comment: {},
    content: {
        paddingLeft: 4,
        color: '#333',
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 4,
        fontSize: 14,
        height: 50,
    },
    commentArea: {
        width: width,
        paddingBottom: 6,
        paddingLeft: 10,
        paddingRight: 10,
        borderBottomWidth: 1,
        borderBottomColor: '#eee',
    },
    commentTitle: {
        color: 'red',
    },

    modalContainer:{
        flex:1,
        paddingTop:45,
        backgroundColor:'white'
    },
    closeIcon:{
        alignSelf:'center',
        fontSize:30,
        marginTop:20,
        color:'red'

    },
    submitButton:{
        width:width-40,
        marginLeft:20,
        padding:15,
        marginTop:20,
        marginBottom:20,
        borderWidth:1,
        borderColor:'red',
        borderRadius:4,
        color:'red',
        fontSize:18,
    },
});
